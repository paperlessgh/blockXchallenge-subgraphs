// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PoolChallenge extends ethereum.Event {
  get params(): PoolChallenge__Params {
    return new PoolChallenge__Params(this);
  }
}

export class PoolChallenge__Params {
  _event: PoolChallenge;

  constructor(event: PoolChallenge) {
    this._event = event;
  }

  get challengeId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class ChallengePool__challengePoolsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: i32;
  value5: BigInt;
  value6: string;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: i32,
    value5: BigInt,
    value6: string
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set(
      "value4",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value4))
    );
    map.set("value5", ethereum.Value.fromSignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromString(this.value6));
    return map;
  }

  getTopicId(): BigInt {
    return this.value0;
  }

  getStake(): BigInt {
    return this.value1;
  }

  getCreatedAt(): BigInt {
    return this.value2;
  }

  getMaturity(): BigInt {
    return this.value3;
  }

  getState(): i32 {
    return this.value4;
  }

  getResults(): BigInt {
    return this.value5;
  }

  getParams(): string {
    return this.value6;
  }
}

export class ChallengePool__getChallengeResultValue0Struct extends ethereum.Tuple {
  get topicId(): BigInt {
    return this[0].toBigInt();
  }

  get stake(): BigInt {
    return this[1].toBigInt();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get maturity(): BigInt {
    return this[3].toBigInt();
  }

  get state(): i32 {
    return this[4].toI32();
  }

  get participants(): Array<
    ChallengePool__getChallengeResultValue0ParticipantsStruct
  > {
    return this[5].toTupleArray<
      ChallengePool__getChallengeResultValue0ParticipantsStruct
    >();
  }

  get winners(): Array<Bytes> {
    return this[6].toBytesArray();
  }

  get losers(): Array<Bytes> {
    return this[7].toBytesArray();
  }

  get results(): BigInt {
    return this[8].toBigInt();
  }

  get params(): string {
    return this[9].toString();
  }
}

export class ChallengePool__getChallengeResultValue0ParticipantsStruct extends ethereum.Tuple {
  get participant(): Address {
    return this[0].toAddress();
  }

  get proposal(): BigInt {
    return this[1].toBigInt();
  }
}

export class ChallengePool__getTopicResultValue0Struct extends ethereum.Tuple {
  get title(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get maintainer(): Address {
    return this[2].toAddress();
  }

  get evaluator(): Address {
    return this[3].toAddress();
  }

  get state(): i32 {
    return this[4].toI32();
  }
}

export class ChallengePool__getTopicChallengeResultTopicStruct extends ethereum.Tuple {
  get title(): string {
    return this[0].toString();
  }

  get description(): string {
    return this[1].toString();
  }

  get maintainer(): Address {
    return this[2].toAddress();
  }

  get evaluator(): Address {
    return this[3].toAddress();
  }

  get state(): i32 {
    return this[4].toI32();
  }
}

export class ChallengePool__getTopicChallengeResultChallengeStruct extends ethereum.Tuple {
  get topicId(): BigInt {
    return this[0].toBigInt();
  }

  get stake(): BigInt {
    return this[1].toBigInt();
  }

  get createdAt(): BigInt {
    return this[2].toBigInt();
  }

  get maturity(): BigInt {
    return this[3].toBigInt();
  }

  get state(): i32 {
    return this[4].toI32();
  }

  get participants(): Array<
    ChallengePool__getTopicChallengeResultChallengeParticipantsStruct
  > {
    return this[5].toTupleArray<
      ChallengePool__getTopicChallengeResultChallengeParticipantsStruct
    >();
  }

  get winners(): Array<Address> {
    return this[6].toAddressArray();
  }

  get losers(): Array<Address> {
    return this[7].toAddressArray();
  }

  get results(): BigInt {
    return this[8].toBigInt();
  }

  get params(): string {
    return this[9].toString();
  }
}

export class ChallengePool__getTopicChallengeResultChallengeParticipantsStruct extends ethereum.Tuple {
  get participant(): Address {
    return this[0].toAddress();
  }

  get proposal(): BigInt {
    return this[1].toBigInt();
  }
}

export class ChallengePool__getTopicChallengeResult {
  value0: ChallengePool__getTopicChallengeResultTopicStruct;
  value1: ChallengePool__getTopicChallengeResultChallengeStruct;

  constructor(
    value0: ChallengePool__getTopicChallengeResultTopicStruct,
    value1: ChallengePool__getTopicChallengeResultChallengeStruct
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromTuple(this.value0));
    map.set("value1", ethereum.Value.fromTuple(this.value1));
    return map;
  }

  getTopic(): ChallengePool__getTopicChallengeResultTopicStruct {
    return this.value0;
  }

  getChallenge(): ChallengePool__getTopicChallengeResultChallengeStruct {
    return this.value1;
  }
}

export class ChallengePool__stakeFeeResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getStake(): BigInt {
    return this.value0;
  }

  getFee(): BigInt {
    return this.value1;
  }
}

export class ChallengePool extends ethereum.SmartContract {
  static bind(address: Address): ChallengePool {
    return new ChallengePool("ChallengePool", address);
  }

  accumulatedFees(): BigInt {
    let result = super.call(
      "accumulatedFees",
      "accumulatedFees():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_accumulatedFees(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "accumulatedFees",
      "accumulatedFees():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  challengePools(param0: BigInt): ChallengePool__challengePoolsResult {
    let result = super.call(
      "challengePools",
      "challengePools(uint256):(uint256,uint256,uint256,uint256,uint8,int256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new ChallengePool__challengePoolsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toI32(),
      result[5].toBigInt(),
      result[6].toString()
    );
  }

  try_challengePools(
    param0: BigInt
  ): ethereum.CallResult<ChallengePool__challengePoolsResult> {
    let result = super.tryCall(
      "challengePools",
      "challengePools(uint256):(uint256,uint256,uint256,uint256,uint8,int256,string)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChallengePool__challengePoolsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toI32(),
        value[5].toBigInt(),
        value[6].toString()
      )
    );
  }

  feeAddress(): Address {
    let result = super.call("feeAddress", "feeAddress():(address)", []);

    return result[0].toAddress();
  }

  try_feeAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeAddress", "feeAddress():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feePercent(): BigInt {
    let result = super.call("feePercent", "feePercent():(uint256)", []);

    return result[0].toBigInt();
  }

  try_feePercent(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("feePercent", "feePercent():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getChallenge(
    _challengeId: BigInt
  ): ChallengePool__getChallengeResultValue0Struct {
    let result = super.call(
      "getChallenge",
      "getChallenge(uint256):((uint256,uint256,uint256,uint256,uint8,(address,int256)[],address[],address[],int256,string))",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );

    return changetype<ChallengePool__getChallengeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getChallenge(
    _challengeId: BigInt
  ): ethereum.CallResult<ChallengePool__getChallengeResultValue0Struct> {
    let result = super.tryCall(
      "getChallenge",
      "getChallenge(uint256):((uint256,uint256,uint256,uint256,uint8,(address,int256)[],address[],address[],int256,string))",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ChallengePool__getChallengeResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMaturePools(): Array<BigInt> {
    let result = super.call(
      "getMaturePools",
      "getMaturePools():(uint256[])",
      []
    );

    return result[0].toBigIntArray();
  }

  try_getMaturePools(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getMaturePools",
      "getMaturePools():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getOpenPools(): Array<BigInt> {
    let result = super.call("getOpenPools", "getOpenPools():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_getOpenPools(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "getOpenPools",
      "getOpenPools():(uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  getTopic(challengeId: BigInt): ChallengePool__getTopicResultValue0Struct {
    let result = super.call(
      "getTopic",
      "getTopic(uint256):((string,string,address,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(challengeId)]
    );

    return changetype<ChallengePool__getTopicResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getTopic(
    challengeId: BigInt
  ): ethereum.CallResult<ChallengePool__getTopicResultValue0Struct> {
    let result = super.tryCall(
      "getTopic",
      "getTopic(uint256):((string,string,address,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(challengeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ChallengePool__getTopicResultValue0Struct>(value[0].toTuple())
    );
  }

  getTopicChallenge(
    _challengeId: BigInt
  ): ChallengePool__getTopicChallengeResult {
    let result = super.call(
      "getTopicChallenge",
      "getTopicChallenge(uint256):((string,string,address,address,uint8),(uint256,uint256,uint256,uint256,uint8,(address,int256)[],address[],address[],int256,string))",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );

    return changetype<ChallengePool__getTopicChallengeResult>(
      new ChallengePool__getTopicChallengeResult(
        changetype<ChallengePool__getTopicChallengeResultTopicStruct>(
          result[0].toTuple()
        ),
        changetype<ChallengePool__getTopicChallengeResultChallengeStruct>(
          result[1].toTuple()
        )
      )
    );
  }

  try_getTopicChallenge(
    _challengeId: BigInt
  ): ethereum.CallResult<ChallengePool__getTopicChallengeResult> {
    let result = super.tryCall(
      "getTopicChallenge",
      "getTopicChallenge(uint256):((string,string,address,address,uint8),(uint256,uint256,uint256,uint256,uint8,(address,int256)[],address[],address[],int256,string))",
      [ethereum.Value.fromUnsignedBigInt(_challengeId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<ChallengePool__getTopicChallengeResult>(
        new ChallengePool__getTopicChallengeResult(
          changetype<ChallengePool__getTopicChallengeResultTopicStruct>(
            value[0].toTuple()
          ),
          changetype<ChallengePool__getTopicChallengeResultChallengeStruct>(
            value[1].toTuple()
          )
        )
      )
    );
  }

  joiningThreshold(): BigInt {
    let result = super.call(
      "joiningThreshold",
      "joiningThreshold():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_joiningThreshold(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "joiningThreshold",
      "joiningThreshold():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  minMaturity(): BigInt {
    let result = super.call("minMaturity", "minMaturity():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minMaturity(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minMaturity", "minMaturity():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  participantsLimit(): BigInt {
    let result = super.call(
      "participantsLimit",
      "participantsLimit():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_participantsLimit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "participantsLimit",
      "participantsLimit():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  stakeFee(_value: BigInt): ChallengePool__stakeFeeResult {
    let result = super.call("stakeFee", "stakeFee(uint256):(uint256,uint256)", [
      ethereum.Value.fromUnsignedBigInt(_value)
    ]);

    return new ChallengePool__stakeFeeResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_stakeFee(
    _value: BigInt
  ): ethereum.CallResult<ChallengePool__stakeFeeResult> {
    let result = super.tryCall(
      "stakeFee",
      "stakeFee(uint256):(uint256,uint256)",
      [ethereum.Value.fromUnsignedBigInt(_value)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new ChallengePool__stakeFeeResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  topicRegistry(): Address {
    let result = super.call("topicRegistry", "topicRegistry():(address)", []);

    return result[0].toAddress();
  }

  try_topicRegistry(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "topicRegistry",
      "topicRegistry():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _topicRegistry(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class BatchCloseChallengeCall extends ethereum.Call {
  get inputs(): BatchCloseChallengeCall__Inputs {
    return new BatchCloseChallengeCall__Inputs(this);
  }

  get outputs(): BatchCloseChallengeCall__Outputs {
    return new BatchCloseChallengeCall__Outputs(this);
  }
}

export class BatchCloseChallengeCall__Inputs {
  _call: BatchCloseChallengeCall;

  constructor(call: BatchCloseChallengeCall) {
    this._call = call;
  }

  get _challengeIds(): Array<BigInt> {
    return this._call.inputValues[0].value.toBigIntArray();
  }
}

export class BatchCloseChallengeCall__Outputs {
  _call: BatchCloseChallengeCall;

  constructor(call: BatchCloseChallengeCall) {
    this._call = call;
  }
}

export class CreateChallengeCall extends ethereum.Call {
  get inputs(): CreateChallengeCall__Inputs {
    return new CreateChallengeCall__Inputs(this);
  }

  get outputs(): CreateChallengeCall__Outputs {
    return new CreateChallengeCall__Outputs(this);
  }
}

export class CreateChallengeCall__Inputs {
  _call: CreateChallengeCall;

  constructor(call: CreateChallengeCall) {
    this._call = call;
  }

  get _topicId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _maturity(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _params(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _proposal(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class CreateChallengeCall__Outputs {
  _call: CreateChallengeCall;

  constructor(call: CreateChallengeCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class JoinChallengeCall extends ethereum.Call {
  get inputs(): JoinChallengeCall__Inputs {
    return new JoinChallengeCall__Inputs(this);
  }

  get outputs(): JoinChallengeCall__Outputs {
    return new JoinChallengeCall__Outputs(this);
  }
}

export class JoinChallengeCall__Inputs {
  _call: JoinChallengeCall;

  constructor(call: JoinChallengeCall) {
    this._call = call;
  }

  get _challengeId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _proposal(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class JoinChallengeCall__Outputs {
  _call: JoinChallengeCall;

  constructor(call: JoinChallengeCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFeeAddressCall extends ethereum.Call {
  get inputs(): SetFeeAddressCall__Inputs {
    return new SetFeeAddressCall__Inputs(this);
  }

  get outputs(): SetFeeAddressCall__Outputs {
    return new SetFeeAddressCall__Outputs(this);
  }
}

export class SetFeeAddressCall__Inputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }

  get _feeAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeAddressCall__Outputs {
  _call: SetFeeAddressCall;

  constructor(call: SetFeeAddressCall) {
    this._call = call;
  }
}

export class SetFeePercentCall extends ethereum.Call {
  get inputs(): SetFeePercentCall__Inputs {
    return new SetFeePercentCall__Inputs(this);
  }

  get outputs(): SetFeePercentCall__Outputs {
    return new SetFeePercentCall__Outputs(this);
  }
}

export class SetFeePercentCall__Inputs {
  _call: SetFeePercentCall;

  constructor(call: SetFeePercentCall) {
    this._call = call;
  }

  get _feePercent(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetFeePercentCall__Outputs {
  _call: SetFeePercentCall;

  constructor(call: SetFeePercentCall) {
    this._call = call;
  }
}

export class SetJoiningThresholdCall extends ethereum.Call {
  get inputs(): SetJoiningThresholdCall__Inputs {
    return new SetJoiningThresholdCall__Inputs(this);
  }

  get outputs(): SetJoiningThresholdCall__Outputs {
    return new SetJoiningThresholdCall__Outputs(this);
  }
}

export class SetJoiningThresholdCall__Inputs {
  _call: SetJoiningThresholdCall;

  constructor(call: SetJoiningThresholdCall) {
    this._call = call;
  }

  get _joiningThreshold(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetJoiningThresholdCall__Outputs {
  _call: SetJoiningThresholdCall;

  constructor(call: SetJoiningThresholdCall) {
    this._call = call;
  }
}

export class SetMinMaturityCall extends ethereum.Call {
  get inputs(): SetMinMaturityCall__Inputs {
    return new SetMinMaturityCall__Inputs(this);
  }

  get outputs(): SetMinMaturityCall__Outputs {
    return new SetMinMaturityCall__Outputs(this);
  }
}

export class SetMinMaturityCall__Inputs {
  _call: SetMinMaturityCall;

  constructor(call: SetMinMaturityCall) {
    this._call = call;
  }

  get _minMaturity(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMinMaturityCall__Outputs {
  _call: SetMinMaturityCall;

  constructor(call: SetMinMaturityCall) {
    this._call = call;
  }
}

export class SetParticipantsLimitCall extends ethereum.Call {
  get inputs(): SetParticipantsLimitCall__Inputs {
    return new SetParticipantsLimitCall__Inputs(this);
  }

  get outputs(): SetParticipantsLimitCall__Outputs {
    return new SetParticipantsLimitCall__Outputs(this);
  }
}

export class SetParticipantsLimitCall__Inputs {
  _call: SetParticipantsLimitCall;

  constructor(call: SetParticipantsLimitCall) {
    this._call = call;
  }

  get _participantsLimit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetParticipantsLimitCall__Outputs {
  _call: SetParticipantsLimitCall;

  constructor(call: SetParticipantsLimitCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall extends ethereum.Call {
  get inputs(): WithdrawFeesCall__Inputs {
    return new WithdrawFeesCall__Inputs(this);
  }

  get outputs(): WithdrawFeesCall__Outputs {
    return new WithdrawFeesCall__Outputs(this);
  }
}

export class WithdrawFeesCall__Inputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}

export class WithdrawFeesCall__Outputs {
  _call: WithdrawFeesCall;

  constructor(call: WithdrawFeesCall) {
    this._call = call;
  }
}
